name: ðŸ“„ Update Releases
run-name: ðŸ“„ Update Releases - ${{ github.event.inputs.start-version }} - ${{ github.event.inputs.end-version }}
on:
    workflow_call:
        inputs:
            start-version:
                description: 'The version to start from'
                required: true
                default: '0.1.0'
                type: string
            end-version:
                description: 'The version to end at'
                required: false
                default: '999.999.999'
                type: string
jobs:
  get-tags:
    runs-on: ubuntu-latest
    outputs:
        versions: ${{ steps.set-matrix.outputs.versions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Get all tags
        shell: pwsh
        env:
            START_VERSION: ${{ inputs.start-version }}
            END_VERSION: ${{ inputs.end-version }}
        id: set-matrix
        run: |
            function Pad($value, $length) {
                $value = $value.ToString()
                $valueLength = $value.Length
                for ($i = 0; $i -lt $length - $valueLength; $i++) {
                    $value = "$($value)0"
                }
                return $value
            }
            
            function Get-UniqueIndex($originalTag) {
                $tag = $originalTag -replace '^v'
                $parts = $tag -split '\.'
                        
                if ($parts.Count -lt 3) {
                    Write-Warning "Tag '$tag' does not conform to expected SemVer format."
                    return 0
                }
                        
                $major = [int]$parts[0]
                $minor = [int]$parts[1] -as [int]
                $end = $parts[2]
                $suffixParts = $end -split '-'
                $patch = [int]$suffixParts[0] -as [int]
                $suffixString = $suffixParts[1] -as [string]
            
                $suffix = 999
                if ($suffixString -ne '') {
                    $suffix = [int]($suffix -replace '[^0-9]', '')
                }
            
                $factor = 4
                switch -wildcard ($suffixString) {
                    '*alpha*' { $factor = 1 }
                    '*beta*' { $factor = 2 }
                    '*rc*' { $factor = 3 }
                }
                
                $suffix = "$factor$suffix"
            
                $majorIndex = Pad $major.ToString() 3
                $minorIndex = Pad $minor.ToString() 3
                $patchIndex = Pad $patch.ToString() 3
                $suffixIndex = Pad $suffix.ToString() 4
                $index = "$majorIndex$minorIndex$patchIndex$suffixIndex"
                # Write-Host "Tag '$originalTag'`n$majorIndex, $minorIndex, $patchIndex, $suffixIndex, $index`n`n"
                return $index -as [long]
            }
            
            function Get-Tags($startVersion, $endVersion) {
                Write-Host "Start version is $startVersion"
                Write-Host "End version is $endVersion"
            
                $startIndex = Get-UniqueIndex $startVersion
                $endIndex = Get-UniqueIndex $endVersion
            
                git fetch --tags --quiet
            
                $allTags = @() 
                
                git tag | ForEach-Object { 
                    $originalTag = $_
                    $uniqueIndex = Get-UniqueIndex $originalTag
                    $tagObj = New-Object PSObject -Property @{
                        Tag         = $originalTag
                        UniqueIndex = $uniqueIndex
                    }
                    if ($uniqueIndex -ge $startIndex -and $uniqueIndex -le $endIndex) {
                        $allTags += $tagObj
                    }
                } 
            
                $outputTags = $allTags | Sort-Object -Property UniqueIndex
                return $outputTags
            }
            
            $start = $env:START_VERSION
            $end = $env:END_VERSION
            
            if ($null -eq $start) {
                $start = '0.0.0'
            }
            
            if ($null -eq $end) {
                $end = '999.999.999'
            }
            
            $tags = Get-Tags $start $end
            
            if ($tags.Count -gt 256) {
                Write-Host "There are $($tags.Count) tags in the list, only the first 256 will be used.`n`nPlease use the start-version defined below:`n`n"
                Write-Host "$($tags[256].Tag)" -ForegroundColor Yellow
                $tags = $tags[0..255]
            }
                        
            $versions = $tags | Select-Object -ExpandProperty Tag |  ConvertTo-Json  -Compress
            
            Write-Host "Ordered Versions are`n$versions"

            echo "versions=$versions" >> $env:GITHUB_OUTPUT
  update-release:
    needs: 
        - get-tags
    strategy:
        max-parallel: 1
        matrix:
            version: ${{fromJson(needs.get-tags.outputs.versions)}}
    runs-on: ubuntu-latest
    steps:
        - name: Generate changelog
          id: changelog
          uses: jcdcdev/jcdcdev.Github.CreateRelease@main
          with:
            version: ${{ matrix.version }}
            github-token: ${{ secrets.GITHUB_TOKEN }}