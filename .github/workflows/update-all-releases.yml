name: ðŸ“„ Update Releases
run-name: ðŸ“„ Update Releases - ${{ github.event.inputs.start-version }} - ${{ github.event.inputs.end-version }}
on:
    workflow_call:
        inputs:
            start-version:
                description: 'The version to start from'
                required: true
                default: '0.1.0'
                type: string
            end-version:
                description: 'The version to end at'
                required: false
                default: '999.999.999'
                type: string
jobs:
  get-tags:
    runs-on: ubuntu-latest
    outputs:
        versions: ${{ steps.set-matrix.outputs.versions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Get all tags
        shell: pwsh
        env:
            START_VERSION: ${{ inputs.start-version }}
            END_VERSION: ${{ inputs.end-version }}
        id: set-matrix
        run: |
            function Get-UniqueIndex($originalTag) {
                $tag = $originalTag -replace '^v'
                $parts = $tag -split '\.'
            
                # Validate that there are at least three parts
                if ($parts.Count -lt 3) {
                    Write-Warning "Tag '$tag' does not conform to expected SemVer format."
                    return 0
                }
            
                # Convert parts to integers
                $major = [int]$parts[0]
                $minor = [int]$parts[1] -as [int]
                $end = $parts[2]
                $suffixParts = $end -split '-'
                $patch = [int]$suffixParts[0] -as [int]
                $suffix = $suffixParts[1] -as [string]

                $patch = 10000

                if ($suffix -ne '') {
                    $patch = [int]($suffix -replace '[^0-9]', '')
                }

                $factor = 100
                if ($suffix -match 'alpha') {
                    $factor = 1000
                }
                if ($suffix -match 'beta') {
                    $factor = 100
                }
                if ($suffix -match 'rc') {
                    $factor = 10
                }

                $version = ($major * 100000) + ($minor * 1000) + ($patch * 100) + ($patch * $factor)
                Write-Host "Tag '$originalTag' has a unique index of $version"
                return $version
            }

            git fetch --tags

            $allTags = @() 
            
            git tag | ForEach-Object { 
                $originalTag = $_
                $uniqueIndex = Get-UniqueIndex $originalTag
                $tagObj = New-Object PSObject -Property @{
                    Tag = $originalTag
                    UniqueIndex = $uniqueIndex
                }
                $allTags += $tagObj
            } 

            $allTags = $allTags | Sort-Object -Property UniqueIndex

            $tags = @()
            $startTag = Get-UniqueIndex $($env:START_VERSION)
            $endTag = Get-UniqueIndex $($env:END_VERSION)
            foreach ($tagObj in $allTags) {
                $tag = $tagObj.Tag
                $startUniqueIndex = $tagObj.UniqueIndex
                $endUniqueIndex = $tagObj.UniqueIndex
                if ($startUniqueIndex -ge $startTag -and $endUniqueIndex -le $endTag) {
                    $tags += $tag
                }
            }

            if ($tags.Count -gt 256) {
                Write-Output "There are $($tags.Count) tags in the list, only the first 256 will be used.`n`nPlease use the start-version defined below:`n`n"
                Write-Output "start-version=$($tags[256])" >> $env:GITHUB_OUTPUT
                $tags = $tags[0..255]
            }
            
            $tags = $tags | Where-Object { $_ -ne '0.0.0' }

            $versions = @()

            $tags | ForEach-Object {
                $versions += $_
            }
            
            $versions = ConvertTo-Json -InputObject $versions -Compress
            echo "versions=$versions" >> $env:GITHUB_OUTPUT
            echo "Versions are`n$versions"
  update-release:
    needs: 
        - get-tags
    strategy:
        max-parallel: 1
        matrix:
            version: ${{fromJson(needs.get-tags.outputs.versions)}}
    runs-on: ubuntu-latest
    steps:
        - name: Generate changelog
          id: changelog
          uses: jcdcdev/jcdcdev.Github.CreateRelease@main
          with:
            version: ${{ matrix.version }}
            github-token: ${{ secrets.GITHUB_TOKEN }}